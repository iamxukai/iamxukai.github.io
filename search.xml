<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>浅谈module.exports和exports</title>
      <link href="/2022/03/01/%E6%B5%85%E8%B0%88module.exports%E5%92%8Cexports/"/>
      <url>/2022/03/01/%E6%B5%85%E8%B0%88module.exports%E5%92%8Cexports/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>目前版本为<code>v16.14.0</code> 的<code>Node.js</code> 支持<code>CommonJS</code> 模块管理方式，模块的导出有<code>module.exports</code> 和<code>exports</code> 两种方式，那么它们的区别和联系是什么呢？</p><h2 id="联系"><a href="#联系" class="headerlink" title="联系"></a>联系</h2><p><code>exports</code>是<code>module.exports</code> 的简写，<code>exports</code>是对<code>module.exports</code>的引用。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// data.js</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>exports<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {}</span>exports<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">// 把 module.exports 的内容改成 {a : 100}</span>exports <span class="token operator">=</span> <span class="token string">'指向其他内存区'</span><span class="token punctuation">;</span> <span class="token comment">// 现在exports不再和module.exports引用同一内存地址</span>exports<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span><span class="token comment">// test.js</span><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./data'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {a : 100}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><h3 id="能否支持多次导出"><a href="#能否支持多次导出" class="headerlink" title="能否支持多次导出"></a>能否支持多次导出</h3><ul><li><code>module.exports</code> 仅支持一次导出，最后的导出会覆盖先前的导出。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// data.js</span><span class="token keyword">const</span> animalOne <span class="token operator">=</span> <span class="token punctuation">{</span>  type<span class="token operator">:</span> <span class="token string">'cat'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> animalTwo <span class="token operator">=</span> <span class="token punctuation">{</span>  type<span class="token operator">:</span> <span class="token string">'dog'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> animalOne<span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> animalTwo<span class="token punctuation">;</span><span class="token comment">//test.js</span><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./data'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { type: 'dog' }</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>exports支持多次导出</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// data2.js</span><span class="token keyword">const</span> animalOne <span class="token operator">=</span> <span class="token punctuation">{</span>  type<span class="token operator">:</span> <span class="token string">'cat'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> animalTwo <span class="token operator">=</span> <span class="token punctuation">{</span>  type<span class="token operator">:</span> <span class="token string">'dog'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>exports<span class="token punctuation">.</span>animalOne <span class="token operator">=</span> animalOne<span class="token punctuation">;</span>exports<span class="token punctuation">.</span>animalTwo <span class="token operator">=</span> animalTwo<span class="token punctuation">;</span><span class="token comment">//test.js</span><span class="token keyword">const</span> data2 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./data2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> data2<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data2<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment">// { type: 'cat' } </span><span class="token comment">// { type: 'dog' } </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你可能会觉得如果在<code>data2.js</code> 中导出方式改成如下内容 ，后面的导出覆盖先前的导出，<code>test.js</code> 导入会是<code>{ type: 'dog' }</code> 。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// data2.js</span>exports <span class="token operator">=</span> animalOne<span class="token punctuation">;</span>exports <span class="token operator">=</span> animalTwo<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>结果并不是，因为<code>exports = animalOne;</code> 将会改变<code>exports</code> 的引用。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//test.js</span><span class="token keyword">const</span> data2 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./data2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p><a href="https://codesandbox.io/s/node-module-export-youhoh">传送门</a></p><p>Demo中的<code>README.md</code> 文件有样例的运行方式说明。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><code>module.exports</code> 直接导出它指向的对象，<code>exports </code> 通过属性导出它指向的对象。</p><p><code>exports</code>是<code>module.exports</code> 的简写，<code>exports</code>是对<code>module.exports</code>的引用。</p>]]></content>
      
      
      <categories>
          
          <category> 技术杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> CommonJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈JS运算符操作数</title>
      <link href="/2022/02/09/%E6%B5%85%E8%B0%88JS%E8%BF%90%E7%AE%97%E7%AC%A6%E6%93%8D%E4%BD%9C%E6%95%B0/"/>
      <url>/2022/02/09/%E6%B5%85%E8%B0%88JS%E8%BF%90%E7%AE%97%E7%AC%A6%E6%93%8D%E4%BD%9C%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>JavaScript数据类型分为值类型和引用数据类型，作为操作数时，这两类操作数有不同的处理过程。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">===</span> <span class="token punctuation">(</span>a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> n<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">===</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>n <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="值类型"><a href="#值类型" class="headerlink" title="值类型"></a>值类型</h2><p>值类型操作数变量会<strong>拷贝</strong>来源变量值。</p><h3 id="例子1"><a href="#例子1" class="headerlink" title="例子1"></a>例子1</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">!==</span> <span class="token punctuation">(</span>a <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h4><blockquote><p>let a1 = 3;<br>console.log(a2 !== (a3 = 4));<br>console.log(a4);</p></blockquote><p><code>a2</code> 拷贝了<code>a1</code> 值，得到3。<code>a3</code> 拷贝了<code>a1</code> 值，得到3。4赋值给<code>a3</code> ，<code>a3</code> 得到4，<code>a3</code> 将值写回<code>a1</code> ，<code>a1</code> 值为4，赋值运算符运算完毕。3不等于4，结果为<code>true</code> 。</p><h4 id="例子变形"><a href="#例子变形" class="headerlink" title="例子变形"></a>例子变形</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">!==</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="例子2"><a href="#例子2" class="headerlink" title="例子2"></a>例子2</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+=</span> <span class="token punctuation">(</span>a <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="解析-1"><a href="#解析-1" class="headerlink" title="解析"></a>解析</h4><blockquote><p>let a1 = 3;<br>console.log(a2 += (a3 += 4, 2)); // 5</p></blockquote><p><code>a2</code> 拷贝了<code>a1</code> 值，得到3。<code>a3</code> 拷贝了<code>a1</code> 值，得到3。<code>a3 += 4</code> ，<code>a3</code> 得到7，<code>a3</code> 将值写回<code>a1</code> ，<code>a1</code> 值为7，赋值运算符运算完毕。<code>a2 += 2</code> ，即<code>3 += 2</code> ，<code>a2</code> 将值写回<code>a1</code> ，<code>a1</code> 最终值为5，赋值运算符运算完毕。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a2值为：'</span><span class="token punctuation">,</span>a <span class="token operator">+=</span> <span class="token punctuation">(</span>a <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">,</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a3值为：'</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a1值为：'</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// a3值为： 7</span><span class="token comment">// a2值为： 5</span><span class="token comment">// a1值为： 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="例子3"><a href="#例子3" class="headerlink" title="例子3"></a>例子3</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>b<span class="token punctuation">,</span> a<span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="解析-2"><a href="#解析-2" class="headerlink" title="解析"></a>解析</h4><blockquote><p>let a1 = 1, b1 = 2;</p><p>[a2, b2] = [b3, a3];</p><p>console.log(a4, b4);</p></blockquote><p><code>b3</code> 拷贝了<code>b1</code> 值，得到2。<code>a3</code> 拷贝了<code>a1</code> 值，得到1。b3赋值给a2，a2得到2，a2将值写回a1，a1值为2。a3赋值给b2，b2得到1，b2将值写回b1，b1值为1。</p><h3 id="例子4"><a href="#例子4" class="headerlink" title="例子4"></a>例子4</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">!==</span> <span class="token punctuation">(</span>a <span class="token operator">=</span> b<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">,</span> a <span class="token operator">!==</span> a<span class="token punctuation">,</span> a <span class="token operator">!==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true false false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>解析略</p><h2 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h2><p>引用数据类型操作数会<strong>引用</strong>来源数据。</p><h3 id="例子1-1"><a href="#例子1-1" class="headerlink" title="例子1"></a>例子1</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> n<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span>a<span class="token punctuation">.</span>x <span class="token operator">=</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> n<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { n: 2 }</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { n: 1, x: { n: 2 } }</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="解析-3"><a href="#解析-3" class="headerlink" title="解析"></a>解析</h4><p>属性访问运算符优先级最高，赋值运算是从右往左。</p><p><code>a.x</code> 先运算，此时变量<code>a</code> 引用的是对象<code>{ n: 1 }</code> ，<code>a.x</code> 即为<code>{ n: 1}.x</code> 。接着是赋值运算，<code>a = { n: 2 }</code> ，变量a的引用发生改变，使之引用到了对象<code>{ n: 2 }</code>，变量b的引用对象没有改变 。<code>{ n: 1}.x = { n: 2 }</code> ，变量<code>b</code>的引用对象<code>{n: 1}</code> 新增属性<code>x</code> ，<code>x</code> 引用对象<code>{ n: 2 }</code> 。</p><h3 id="例子2-1"><a href="#例子2-1" class="headerlink" title="例子2"></a>例子2</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> head <span class="token operator">=</span> <span class="token punctuation">{</span> next<span class="token operator">:</span> <span class="token punctuation">{</span> next<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">[</span>head<span class="token punctuation">.</span>next<span class="token punctuation">,</span> head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">,</span> head<span class="token punctuation">.</span>next<span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { next: 1 }</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="解析-4"><a href="#解析-4" class="headerlink" title="解析"></a>解析</h4><p>表达式<code>[head.next, head.next.next] = [head.next.next, head.next];</code> 中的右半部分<code>[head.next.next, head.next]</code> 可以看成<code>head.next.next = 1</code> 和 <code>head.next = { next: 1 }</code> 。整个表达式就是<code>[head.next, head.next.next] = [1, { next: 1 }];</code> 。先执行<code>head.next = 1</code> ，此时<code>head</code>的引用对象的<code>next</code> 属性值变成1，head 引用对象就成了<code>{ next: 1 }</code> 。然后执行<code>head.next.next = { next: 1 }</code> ，<code>head.next.next</code>  为<code>undefined</code> ，因而<code>undefined = { next: 1}</code> 。</p><h4 id="例子变形-1"><a href="#例子变形-1" class="headerlink" title="例子变形"></a>例子变形</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> head <span class="token operator">=</span> <span class="token punctuation">{</span> next<span class="token operator">:</span> <span class="token punctuation">{</span> next<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">[</span>head<span class="token punctuation">.</span>next<span class="token punctuation">,</span> head<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="例子3-1"><a href="#例子3-1" class="headerlink" title="例子3"></a>例子3</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">===</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>解析略</p>]]></content>
      
      
      <categories>
          
          <category> 技术杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 操作数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图片懒加载</title>
      <link href="/2022/02/07/%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD/"/>
      <url>/2022/02/07/%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>图片资源大小比较大。某些页面会有成百上千张图片，如果向服务器请求加载页面中的所有图片，那么传输图片资源会占用大量带宽和影响到页面的加载速度。</p><p>考虑使用图片的懒加载方案，按需请求图片资源。</p><h2 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h2><ul><li><p>先加载页面可见区域的图片。在滚动发生时，加载可见区域中未加载过的图片。</p></li><li><p>预加载部分不可见区域的图片，减少滚动时图片来不及加载导致的局部白屏时间。</p></li><li><p>通过节流减少页面滚动引起的<code>doShowImage</code> 回调函数的调用频率。</p></li></ul><h3 id="相关状态"><a href="#相关状态" class="headerlink" title="相关状态"></a>相关状态</h3><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">const</span> <span class="token punctuation">[</span>imgList<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>   <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> idx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> idx <span class="token operator">+</span> <span class="token string">".jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">[</span>top<span class="token punctuation">,</span> setTop<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">[</span>show<span class="token punctuation">,</span> setShow<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>  <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> idx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>      idx <span class="token operator">*</span> <span class="token number">200</span> <span class="token operator">&lt;</span> window<span class="token punctuation">.</span>visualViewport<span class="token punctuation">.</span>height <span class="token operator">+</span> <span class="token number">500</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>imgList</code> 15张图片</li><li><code>top</code> 滚动条的滚动距离</li><li><code>show</code> 每个图片是否加载过的标识</li></ul><h3 id="加载可见区域图片"><a href="#加载可见区域图片" class="headerlink" title="加载可见区域图片"></a>加载可见区域图片</h3><ul><li>首次加载页面</li></ul><p>有15张图片，可见区域和不可见区域预加载范围内的图片的<code>show</code> 标记为<code>true</code>，不可见区域且不属于预加载范围的图片的<code>show</code> 标记为<code>false</code>  。</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// 可以预加载不可见区域中顶部高度为500像素区域的原本未加载图片</span><span class="token keyword">const</span> <span class="token punctuation">[</span>show<span class="token punctuation">,</span> setShow<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>  <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> idx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>      idx <span class="token operator">*</span> <span class="token number">200</span> <span class="token operator">&lt;</span> window<span class="token punctuation">.</span>visualViewport<span class="token punctuation">.</span>height <span class="token operator">+</span> <span class="token number">500</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>页面发生滚动</li></ul><p>加载可见区域中原本未加载过的图片，已加载过的图片节点不作处理。</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">function</span> <span class="token function">doShowImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">setTop</span><span class="token punctuation">(</span>imageContainer<span class="token punctuation">.</span>current<span class="token operator">?.</span>scrollTop <span class="token operator">||</span> top<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>show<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 拷贝可见标记数组，只更新原本不可见图片的标记</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> idx <span class="token keyword">in</span> show<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 可以预加载不可见区域中顶部高度为500像素区域的原本未加载图片</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">220</span> <span class="token operator">&lt;</span> top <span class="token operator">+</span> window<span class="token punctuation">.</span>visualViewport<span class="token punctuation">.</span>height <span class="token operator">+</span> <span class="token number">500</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       temp<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">setShow</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD/%E8%AF%B7%E6%B1%82%E6%9C%AA%E5%8A%A0%E8%BD%BD%E7%9A%84%E5%9B%BE%E7%89%87%E8%B5%84%E6%BA%90.gif" alt="请求未加载的图片资源"></p><h3 id="节流控制频率"><a href="#节流控制频率" class="headerlink" title="节流控制频率"></a>节流控制频率</h3><p>节流减少页面滚动引起的回调函数<code>doShowImage</code> 的调用频率。</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token parameter">fun<span class="token operator">:</span> Function<span class="token punctuation">,</span> wait<span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>timer<span class="token punctuation">,</span> setTimer<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">number</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>timer <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"最少0.2秒触发一次"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"s"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">fun</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">setTimer</span><span class="token punctuation">(</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setTimer</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> imageLoadThrottle <span class="token keyword">from</span> <span class="token string">"./utils/throttle"</span><span class="token punctuation">;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>  <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>image-container<span class="token punctuation">"</span></span>  <span class="token attr-name">onScroll</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token function">imageLoadThrottle</span><span class="token punctuation">(</span>doShowImage<span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>  <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>imageContainer<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD/%E8%8A%82%E6%B5%81%E6%8E%A7%E5%88%B6%E9%A2%91%E7%8E%87.gif" alt="节流控制频率"></p><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><p><a href="https://codesandbox.io/s/react-image-lazy-load-9fjo7">传送门</a></p>]]></content>
      
      
      <categories>
          
          <category> 性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 懒加载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>useState惰性初始化</title>
      <link href="/2022/01/28/useState%E6%83%B0%E6%80%A7%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
      <url>/2022/01/28/useState%E6%83%B0%E6%80%A7%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>重新渲染有状态组件时，都会再次执行<code>useState</code>钩子函数。<code>useState</code>的函数参数只在组件初次渲染时作为状态的初始值，因而可以考虑后续每次执行<code>useState</code>钩子函数时，避免不必要的状态初始值计算所带来的性能开销。</p><p><img src="/images/useState/useState-1.gif" alt="再次执行useState"></p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token string">"./styles.css"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">,</span> setNumber<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"compute initial state"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">handleChange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setNumber</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>App<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"> number:</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>          <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token builtin">number</span> <span class="token operator">||</span> <span class="token string">""</span><span class="token punctuation">}</span></span>          <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleChange<span class="token punctuation">}</span></span>          <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span>          <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span>        <span class="token punctuation">/&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token punctuation">{</span><span class="token builtin">number</span> <span class="token operator">?</span> <span class="token builtin">number</span> <span class="token operator">:</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Please input a number</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>可以通过为<code>useState</code>钩子函数提供一个函数类型的参数，使得只在组件第一次渲染时才调用这个函数，将函数的返回值当作状态的初始值。</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">,</span> setNumber<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"arrow function called"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/useState/useState-2.gif"></p><blockquote><p>useState(console.log(“compute initial state”)); /* console对象调用log方法并返回<strong>undefined作为useState函数的参数</strong> */</p><p>useState(() =&gt; console.log(“arrow function called”)); /* <strong>useState函数的参数为一个箭头函数</strong>，只在组件第一次渲染时会调用这个箭头函数，箭头函数返回undefined作为组件初次渲染时number的初始状态 */</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hooks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>清除浮动</title>
      <link href="/2022/01/20/%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8/"/>
      <url>/2022/01/20/%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>众所周知，浮动的元素脱离文档流。</p><p>如果容器内的子元素全都浮动且没有设置容器的高度，那么容器的高度就会为0。</p><p><img src="/images/%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8/%E5%AE%B9%E5%99%A8%E9%AB%98%E5%BA%A6%E4%B8%BA0.png" alt="现实情况"></p><p>这可能不是我们想要的结果，我们想让浮动的元素仍能够<code>自动撑开</code>容器。</p><p><img src="/images/%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8/%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8.png" alt="理想情况"></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>utf-8</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">    <span class="token selector">.container</span> <span class="token punctuation">{</span>      <span class="token property">border</span><span class="token punctuation">:</span> solid 2px black<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">.item-one</span> <span class="token punctuation">{</span>      <span class="token property">width</span><span class="token punctuation">:</span> 10vw<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 10vh<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>67<span class="token punctuation">,</span> 187<span class="token punctuation">,</span> 224<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">.item-two</span> <span class="token punctuation">{</span>      <span class="token property">width</span><span class="token punctuation">:</span> 30vw<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 20vh<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>95<span class="token punctuation">,</span> 231<span class="token punctuation">,</span> 124<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item-one<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item-two<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h3><ul><li>新增一个子元素，使用clear清除浮动。</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item-one<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item-two<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clear<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>使用伪元素after和clear样式属性清除浮动。</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container::after</span> <span class="token punctuation">{</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>伪元素默认是行内元素，需要改变显示类型。</p></blockquote><h3 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h3><p>容器新增<code>overflow: auto</code>、<code>overflow: scroll</code>或<code>overflow: hidden</code>样式，创建块级格式上下文<code>BFC</code>。<code>BFC</code>是一个独立的布局空间，不会让子元素影响到外面布局。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">{</span>    <span class="token property">border</span><span class="token punctuation">:</span> solid 2px black<span class="token punctuation">;</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浮动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>选取DOM元素的方法分析</title>
      <link href="/2022/01/20/%E9%80%89%E5%8F%96DOM%E5%85%83%E7%B4%A0%E7%9A%84%E6%96%B9%E6%B3%95%E5%88%86%E6%9E%90/"/>
      <url>/2022/01/20/%E9%80%89%E5%8F%96DOM%E5%85%83%E7%B4%A0%E7%9A%84%E6%96%B9%E6%B3%95%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>有不少DOM元素选取方法，那么它们的联系和区别是怎么样的呢？</p><h2 id="联系"><a href="#联系" class="headerlink" title="联系"></a>联系</h2><h3 id="QuerySelector-类"><a href="#QuerySelector-类" class="headerlink" title="QuerySelector*类"></a>QuerySelector*类</h3><ul><li>querySelector</li></ul><p><code>querySelector</code>方法通过传入<code>id</code>、<code>class</code>、<code>tag</code>属性来选取第一个符合条件的元素。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> eleOne <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#unqiue-id'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> eleTwo <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.element-class'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> eleThree <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> eleFour <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'body div.element-class'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>querySelectorAll</li></ul><p>参数规格和<code>querySelector</code>一样，返回的是类数组对象。</p><p>使用<code>querySelectorAll</code>方法选取全部<code>img</code>元素。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> imageList <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>imageList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">img</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'image:'</span><span class="token punctuation">,</span> img<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>同样可以使用<code>querySelectorAll</code>方法选取相同<code>class</code>属性值的元素。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> eleList <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'.element-class'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="GetElement-类"><a href="#GetElement-类" class="headerlink" title="GetElement*类"></a>GetElement*类</h3><ul><li>getElementById</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> eleOne <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'unqiue-id'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>getElementsByTagName</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> imageList <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>imageList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">img</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'image:'</span><span class="token punctuation">,</span> img<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>getElementsByClassName</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> eleList <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">'element-class'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>getElementsByName</li></ul><p>用于单选按钮组共享name属性</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>colors<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>红色<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>colors<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>yellow<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>黄色<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>colors<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>green<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>绿色<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> radioList <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByName</span><span class="token punctuation">(</span><span class="token string">'colors'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="混合使用"><a href="#混合使用" class="headerlink" title="混合使用"></a>混合使用</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> blackDiv <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'container'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.black'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> blackDiv <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#container'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">'black'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>可以看到<code>querySelector*</code>类方法和<code>getElement*</code>类方法功能相似，建议主要选择其中一类方法，保持代码风格统一。</p><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><h3 id="所属规范"><a href="#所属规范" class="headerlink" title="所属规范"></a>所属规范</h3><p><code>querySelector*</code>属于W3C的<code>Selectors API</code>规范，<code>getElement*</code>属于W3C的<code>DOM</code>规范。</p><h3 id="返回类型"><a href="#返回类型" class="headerlink" title="返回类型"></a>返回类型</h3><p><code>querySelectAll</code>返回<strong>静态</strong><code>NodeList</code>对象，<code>getElementsBy*</code>类方法返回<strong>实时</strong><code>HTMLCollection</code>对象或<strong>实时</strong><code>NodeList</code>对象。</p><p>如果不是直接对<strong>静态</strong><code>NodeList</code>对象进行操作的话，DOM树的变化不会影响到<strong>静态</strong><code>NodeList</code>对象。<code>getElementsBy*</code>类方法返回的<strong>实时</strong>对象则会受到影响。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>one<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>two<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>three<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> parent <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> lis <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>parent<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lis<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output: 4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> parent <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> lis <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>parent<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lis<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output: 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><p><code>getElement*</code>类方法的性能会更好。可用如下类似方法进行测试。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">'getElementById'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'unique-id'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">'getElementById'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">'querySelector'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'unique-id'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">'querySelector'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="灵活性"><a href="#灵活性" class="headerlink" title="灵活性"></a>灵活性</h3><p><code>querySelector*</code>类方法灵活性更好一些。</p>]]></content>
      
      
      <categories>
          
          <category> 技术杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DOM </tag>
            
            <tag> API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现虚拟列表</title>
      <link href="/2022/01/15/%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%88%97%E8%A1%A8/"/>
      <url>/2022/01/15/%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%88%97%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>虚拟列表是对长列表进行按需渲染，渲染可视区域内的列表元素。</p><h2 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h2><p>渲染可视区域内的列表元素，发生滚动时，通过监听滚动事件实现可视区域的DOM节点动态更新。</p><h3 id="主体结构设计"><a href="#主体结构设计" class="headerlink" title="主体结构设计"></a>主体结构设计</h3><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card-container<span class="token punctuation">"</span></span> <span class="token attr-name">onScroll</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>doUpdateCardList<span class="token punctuation">}</span></span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>cardContainer<span class="token punctuation">}</span></span>   <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>     showCalendar <span class="token operator">?</span> <span class="token punctuation">{</span> pointerEvents<span class="token operator">:</span> <span class="token string">'none'</span> <span class="token punctuation">}</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>   <span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">   </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>      transform<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">translateY(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>startOffset<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px)</span><span class="token template-punctuation string">`</span></span>     <span class="token punctuation">}</span><span class="token punctuation">}</span></span>   <span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token punctuation">{</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">VirtualCardList</span></span> <span class="token attr-name">flightList</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>flightList<span class="token punctuation">}</span></span> <span class="token attr-name">startIndex</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>startIndex<span class="token punctuation">}</span></span> <span class="token attr-name">endIndex</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>endIndex<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>      <span class="token punctuation">}</span><span class="token plain-text">   </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>cardContainer</code>为列表的可视区域容器</li><li><code>transform: translateY(${startOffset}px)</code>用于将要渲染的列表元素拖回可视区域</li><li><code>VirtualCardList</code>提供要渲染的列表元素</li></ul><h3 id="相关状态"><a href="#相关状态" class="headerlink" title="相关状态"></a>相关状态</h3><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">const</span> <span class="token punctuation">[</span>flightList<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">getFlight</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">[</span>startIndex<span class="token punctuation">,</span> setStartIndex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">[</span>itemSize<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">120</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">[</span>endIndex<span class="token punctuation">,</span> setEndIndex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>visualViewport<span class="token punctuation">.</span>height <span class="token operator">/</span> itemSize<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">[</span>startOffset<span class="token punctuation">,</span> setStartOffset<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">[</span>top<span class="token punctuation">,</span> setTop<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>visibleCount</code>为可视区域中可见的列表元素个数</li><li><code>startIndex</code>为要渲染的列表元素起始索引</li><li><code>endIndex</code>为要渲染的列表元素末尾索引，等于<code>startIndex + visibleCount + 1</code>，加1是为了形成滚动条</li><li><code>startOffset</code>为虚拟列表偏离可视区域的上方长度</li><li><code>top</code>为<code>cardContainer</code>顶部距离可见区域的距离</li><li><code>itemSize</code>为每个列表元素的高度</li></ul><h3 id="监听滚动事件"><a href="#监听滚动事件" class="headerlink" title="监听滚动事件"></a>监听滚动事件</h3><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">function</span> <span class="token function">doUpdateCardList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setTop</span><span class="token punctuation">(</span>cardContainer<span class="token punctuation">.</span>current<span class="token operator">?.</span>scrollTop <span class="token operator">||</span> top<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> sIndex <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>top <span class="token operator">/</span> itemSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> visibleCount <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>visualViewport<span class="token punctuation">.</span>height <span class="token operator">/</span> itemSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> eIndex <span class="token operator">=</span> sIndex <span class="token operator">+</span> visibleCount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">setStartOffset</span><span class="token punctuation">(</span>top <span class="token operator">-</span> <span class="token punctuation">(</span>top <span class="token operator">%</span> itemSize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sIndex <span class="token operator">!==</span> startIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setStartIndex</span><span class="token punctuation">(</span>sIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>eIndex <span class="token operator">!==</span> endIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setEndIndex</span><span class="token punctuation">(</span>eIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><h3 id="动图"><a href="#动图" class="headerlink" title="动图"></a>动图</h3><p><img src="/images/%E8%99%9A%E6%8B%9F%E5%88%97%E8%A1%A8.gif"></p><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><p><a href="https://codesandbox.io/s/flight-info-2fxtd">传送门</a></p>]]></content>
      
      
      <categories>
          
          <category> 性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚拟列表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我是什么样的创作人</title>
      <link href="/2022/01/10/%E6%88%91%E6%98%AF%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%E5%88%9B%E4%BD%9C%E4%BA%BA/"/>
      <url>/2022/01/10/%E6%88%91%E6%98%AF%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%E5%88%9B%E4%BD%9C%E4%BA%BA/</url>
      
        <content type="html"><![CDATA[<p>2021年，我写了6篇博文。在今年，我会继续写博文。通过写博文，分享自己的认知、提高自己的前端开发水平。</p><p><img src="/images/2021%E5%B9%B4%E7%BB%88%E5%9B%9E%E9%A1%BE.png"></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 年终回顾 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一行代码解决滚动穿透</title>
      <link href="/2022/01/09/%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E8%A7%A3%E5%86%B3%E6%BB%9A%E5%8A%A8%E7%A9%BF%E9%80%8F/"/>
      <url>/2022/01/09/%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E8%A7%A3%E5%86%B3%E6%BB%9A%E5%8A%A8%E7%A9%BF%E9%80%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>滚动穿透是指在弹窗出现的情况下，底层页面仍然可以滚动。</p><p><img src="/images/%E6%BB%9A%E5%8A%A8%E7%A9%BF%E9%80%8F.gif"></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>使用弹窗出现条件<code>showCalendar</code>，如果为<code>true</code>，添加底层页面样式<code>pointer-events: 'none'</code>，否则去除该样式。</p><pre class="line-numbers language-TSX" data-language="TSX"><code class="language-TSX">&lt;div className="card-container" onScroll={doUpdateCardList} ref={cardContainer}    style={        showCalendar ? { pointerEvents: 'none' } : {}    }&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p><a href="https://codesandbox.io/s/flight-info-2fxtd">传送门</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 滚动穿透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP缓存</title>
      <link href="/2022/01/07/HTTP%E7%BC%93%E5%AD%98/"/>
      <url>/2022/01/07/HTTP%E7%BC%93%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>HTTP缓存可以复用之前获得的资源副本，减少网络流量、服务器端带宽和用户等待时间，提高用户体验。常见的HTTP缓存只能存储GET请求的资源。</p><h2 id="Expires-Header"><a href="#Expires-Header" class="headerlink" title="Expires Header"></a>Expires Header</h2><p>强缓存。Expires是<code>响应头</code>，告诉浏览器在资源副本过期前可以直接从浏览器缓存读取数据，无需再次请求。</p><h2 id="Cache-Control-Header"><a href="#Cache-Control-Header" class="headerlink" title="Cache-Control Header"></a>Cache-Control Header</h2><p>HTTP/1.1定义的 Cache-Control 头用来区分对缓存机制的支持情况， 请求头和响应头都支持这个属性。通过它提供的不同的值来定义缓存策略。Cache-Control可以更精细地设置缓存，优先级高于Expires。</p><h3 id="Cache-Control-no-store"><a href="#Cache-Control-no-store" class="headerlink" title="Cache-Control: no-store"></a>Cache-Control: no-store</h3><p>不存储客户端请求和服务端响应的内容，每次客户端发起请求都会下载完整的响应内容。</p><h3 id="Cache-Control-no-cache"><a href="#Cache-Control-no-cache" class="headerlink" title="Cache-Control: no-cache"></a>Cache-Control: no-cache</h3><p>客户端向服务端发送请求时，需要带上和本地缓存校验有关的请求头字段。服务器端会验证请求中所描述的资源副本是否过期，若未过期返回<code>304</code>状态码，客户端则使用本地资源副本且更新副本到期时间，否则返回<code>200</code>状态码，用响应实体信息替换客户端本地的资源副本。</p><h3 id="Cache-Control-private"><a href="#Cache-Control-private" class="headerlink" title="Cache-Control: private"></a>Cache-Control: private</h3><p>私有缓存</p><h3 id="Cache-Control-public"><a href="#Cache-Control-public" class="headerlink" title="Cache-Control: public"></a>Cache-Control: public</h3><p>公共缓存</p><h3 id="Cache-Control-max-age-seconds"><a href="#Cache-Control-max-age-seconds" class="headerlink" title="Cache-Control:max-age=seconds"></a>Cache-Control:max-age=seconds</h3><p>表示资源过期时间。对于Expires来说，max-age是请求发起后经过的秒数。</p><p>Cache-Control: max-age=86400</p><h3 id="Cache-Control-must-revalidate"><a href="#Cache-Control-must-revalidate" class="headerlink" title="Cache-Control: must-revalidate"></a>Cache-Control: must-revalidate</h3><p>如果从响应头的max-age信息和当前时间得出本地资源副本过期了，在使用资源副本前必须进行校验。</p><h3 id="ETag-If-None-Match"><a href="#ETag-If-None-Match" class="headerlink" title="ETag/If-None-Match"></a>ETag/If-None-Match</h3><p>ETag/If-None-Match和Cache-Control配合使用。<code>ETag</code>作为缓存的一种强校验器，是服务端资源的唯一标识，通常是对文件大小、文件索引编号、最后修改时间进行哈希得到。如果资源请求的响应头里含有ETag，客户端可以在后续的请求头中带上 <code>If-None-Match</code> 头来验证缓存是否过期。</p><h3 id="Last-Modified-If-Modified-Since"><a href="#Last-Modified-If-Modified-Since" class="headerlink" title="Last-Modified/If-Modified-Since"></a>Last-Modified/If-Modified-Since</h3><p>Last-Modified/If-Modified-Since和Cache-Control配合使用。<code>Last-Modified</code> 响应头可以作为一种弱校验器。说它弱是因为它只能精确到一秒。如果响应头里含有这个信息，客户端可以在后续的请求头中带上 <code>If-Modified-Since</code> 来验证缓存是否过期。</p><blockquote><ul><li><p>Last-Modified只能精确到1秒，如果服务端文件在一秒内被多次修改，那么无法准确验证。</p></li><li><p>如果服务端定期生成内容不变的文件，通过If-Modified-Since验证缓存后，会不必要地更新本地的资源副本。</p></li><li><p>ETag的服务端计算开销会比Last-Modified大。</p></li><li><p>ETag可以和Last-Modified配合使用，ETag的优先级更高。</p></li></ul></blockquote><h3 id="使用协商缓存例子"><a href="#使用协商缓存例子" class="headerlink" title="使用协商缓存例子"></a>使用协商缓存例子</h3><p>客户端发起请求，缓存检索到本地有资源副本，那么会在请求时带上If-None-Match请求头，请服务端校验资源副本是否过期。如果服务端返回了<code>304</code>状态码（该响应不会带有实体信息），则表示资源副本是新鲜的，客户端使用资源副本并更新该副本的过期时间，否则返回<code>200</code>状态码，用响应实体信息替换客户端本地的资源副本。</p>]]></content>
      
      
      <categories>
          
          <category> 前端常识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
            <tag> cache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTPS介绍</title>
      <link href="/2022/01/06/HTTPS%E4%BB%8B%E7%BB%8D/"/>
      <url>/2022/01/06/HTTPS%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一篇有关数据传输安全的博文，欢迎阅读。</p><h2 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h2><h3 id="套接字"><a href="#套接字" class="headerlink" title="套接字"></a>套接字</h3><p>套接字为通信端点，端口号拼接IP地址即构成了套接字。</p><h3 id="对称密钥加密"><a href="#对称密钥加密" class="headerlink" title="对称密钥加密"></a>对称密钥加密</h3><p>信息的发送方和接收方使用同一个密钥去加密和解密数据。</p><h3 id="非对称密钥加密"><a href="#非对称密钥加密" class="headerlink" title="非对称密钥加密"></a>非对称密钥加密</h3><p>使用不同的密钥来分别完成加密和解密操作，一个公开发布的公钥，另一个由用户自己秘密保存的私钥。信息发送者用公开密钥去加密，而信息接收者则用私用密钥去解密。这两把密钥可以互为加解密。</p><h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><p>传统的HTTP协议通信将报文信息传输到TCP套接字，TCP套接字发送报文给目的主机。</p><h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><p>两部分组成，HTTP + SSL / TLS，在HTTP上加了一层加解密信息的模块。</p><p>HTTPS将报文信息传输给SSL套接字进行加密，SSL套接字将加密后的报文发送给TCP套接字，TCP套接字将报文发送给目的主机。目的主机通过TCP套接字获取加密报文，然后给SSL套接字进行解密。</p><p>HTTPS 在内容传输上使用的是对称密钥加密，非对称密钥加密用在证书验证阶段。</p><h3 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h3><p>客户端发起 HTTPS 请求，服务端返回数字证书。客户端对证书内容和当前浏览的网页地址进行验证，验证通过后使用证书中心的公钥解密数字证书，获得服务端公钥。客户端生成对称密钥，通过服务端公钥对对称密钥进行加密，生成数字签名。客户端传输数字签名到服务端，服务端使用私钥解密得到对称密钥。此时被黑客截获也没用，因为只有服务端的私钥才可以对其进行解密。此后数据交互都通过对称密钥进行加解密。</p>]]></content>
      
      
      <categories>
          
          <category> 前端常识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTPS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flex布局使用小结</title>
      <link href="/2021/12/26/Flex%E5%B8%83%E5%B1%80%E4%BD%BF%E7%94%A8%E5%B0%8F%E7%BB%93/"/>
      <url>/2021/12/26/Flex%E5%B8%83%E5%B1%80%E4%BD%BF%E7%94%A8%E5%B0%8F%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Flex布局适合组件或者简单的页面，用于实现container内items的布局。</p><p><img src="/images/Flex%E5%B8%83%E5%B1%80.jpg"></p><h2 id="用于container的属性"><a href="#用于container的属性" class="headerlink" title="用于container的属性"></a>用于container的属性</h2><ul><li><p>flex-direction：主轴方向</p></li><li><p>flex-wrap：主轴方向是否是单行排列</p></li><li><p>flex-flow：flex-direction || flex-wrap</p></li><li><p>align-items：子项在cross axis上的对齐方式</p></li><li><p>justify-content：每一行在main axis上的对齐方式</p></li><li><p>align-content：多行展示情况下，每一行在cross axis上的对齐方式</p></li></ul><h2 id="用于items的属性"><a href="#用于items的属性" class="headerlink" title="用于items的属性"></a>用于items的属性</h2><ul><li><p>order：每个item的顺序</p></li><li><p>flex-grow：当容器有额外空间时，当前item的扩展宽度</p></li><li><p>flex-shrink：容器空间不足时，当前item的收缩比例</p></li><li><p>flex-basis：在分配剩余空间时的弹性空间，尽可能提前占据空间</p></li><li><p>flex：flex-grow || flex-shrink || flex-basis</p></li><li><p>align-self：当前item在cross axis上的对齐方式</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 页面布局 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端框架演进</title>
      <link href="/2021/12/19/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E6%BC%94%E8%BF%9B/"/>
      <url>/2021/12/19/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E6%BC%94%E8%BF%9B/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前端框架演进过程丰富多彩。了解前端框架的演进有助于理解各个框架的优劣，从而根据实际开发需求选择合适的框架。</p><h2 id="没有框架时代"><a href="#没有框架时代" class="headerlink" title="没有框架时代"></a>没有框架时代</h2><p>简单的页面和代码没有架构可言，通过操作DOM就能完成的工作不需要复杂的设计模式和代码管理机制。 HTML由后端渲染返回，使用CSS进行简单的表现辅助，编写JavaScript脚本实现例如轮播等动画效果。</p><h2 id="异步通信时代"><a href="#异步通信时代" class="headerlink" title="异步通信时代"></a>异步通信时代</h2><p>2005年，谷歌在web应用中使用异步通信技术，开启了web前端的一个新时代。前端从后端获取数据，从而在运行时动态地渲染内容，实现数据模型和视图层的解耦。这时jQuery提供了便捷的DOM操作方法和异步请求方法。出现了模板分离，前端不再使用后端渲染返回的HTML，而是使用模板引擎编写模板和使用JavaScript脚本编写渲染逻辑，然后从后端获取数据，动态生成HTML。</p><h2 id="MVC架构时代"><a href="#MVC架构时代" class="headerlink" title="MVC架构时代"></a>MVC架构时代</h2><p>前端应用逐渐复杂，诞生了一些早期的前端MVC框架，例如Backbone和Knockout。模型存放所有的对象数据。视图呈现信息给用户并接收用户的交互信息。控制层是模型和视图之间的纽带。</p><h2 id="工程化时代"><a href="#工程化时代" class="headerlink" title="工程化时代"></a>工程化时代</h2><p>2009年，Node.js出现了，大大改善了前端的工程能力。出现了更好的构建工具，例如Grunt和Gulp。出现了包管理工具，例如Bower和NPM。出现了模块管理方法，例如AMD和CommonJS。</p><h2 id="单页面应用时代"><a href="#单页面应用时代" class="headerlink" title="单页面应用时代"></a>单页面应用时代</h2><p>随着单页面应用的流行，前后端的架构分离成为行业的标准实践，前端进入了下一个时代。模拟数据服务成为标准实践，例如RAP和MockJS。MVC架构满足不了应用的需求，组件化开始流行，前端应用由一个个细小组件组合而成。出现了Angular、React和Vue等优秀的前端框架。出现了大前端的概念，采用例如React Native和Flutter等框架开发跨平台的移动应用。</p><h2 id="大型应用时代"><a href="#大型应用时代" class="headerlink" title="大型应用时代"></a>大型应用时代</h2><p>在大型应用中，当组件化和MVC都无法应对时，微前端出现了。微前端解决了三个问题。第一个是跨框架问题，即如何在一个应用中使用多个前端框架。第二个是应用拆分问题，即如何将一个复杂的应用拆解为微小的应用，并能将其复用到其他应用中。第三是遗留系统迁移问题，即如何让一个旧的应用嵌入到现有的应用里去运行。</p>]]></content>
      
      
      <categories>
          
          <category> 前端常识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架演进 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>this使用小结</title>
      <link href="/2021/12/09/this%E4%BD%BF%E7%94%A8%E5%B0%8F%E7%BB%93/"/>
      <url>/2021/12/09/this%E4%BD%BF%E7%94%A8%E5%B0%8F%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>弄清楚 JavaScript 中的this，有助于读写代码。这里是我的一份个人小结，欢迎阅读。</p><h2 id="全局环境"><a href="#全局环境" class="headerlink" title="全局环境"></a>全局环境</h2><p>无论是否在严格模式下，在全局执行环境中this 都指向全局对象。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> window<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//=&gt; true</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'react'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//=&gt; react</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//=&gt; react</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="普通函数"><a href="#普通函数" class="headerlink" title="普通函数"></a>普通函数</h2><ul><li>非严格模式下，this默认指向全局对象。</li><li>严格模式下，this为undefined。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token string">'use strict'</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 因为这里的f()是直接调用的，而不是作为对象的属性或方法调用的，如window.f()，所以这里的this为undefined。</p><h2 id="嵌套普通函数"><a href="#嵌套普通函数" class="headerlink" title="嵌套普通函数"></a>嵌套普通函数</h2><p>未指定this的情况下，非严格模式this指向window，严格模式则为undefined。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// window</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function-variable function">method</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token string">'use strict'</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function-variable function">method</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><ul><li>箭头函数从作用域链上一层继承this。在下面的代码中，传递给箭头函数的this与封闭函数中的this值相同。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// this 正确地指向 p 实例</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在全局执行环境中，箭头函数的this被设置为全局对象。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj<span class="token operator">=</span><span class="token punctuation">{</span>  <span class="token function-variable function">bar</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> x<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//这里并没有调用bar()，只是引用bar赋给fn</span><span class="token keyword">let</span> fn <span class="token operator">=</span> obj<span class="token punctuation">.</span>bar<span class="token punctuation">;</span><span class="token comment">//fn()返回了一个箭头函数，在全局环境下调用了箭头函数</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> window<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//=&gt; true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>通过 call() 或 apply() 方法调用一个箭头函数时，this参数会被忽略。</li></ul><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>对象中的方法，this指向的是调用该方法的对象。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 通过bind(this)使得onPress的this指向当前实例化对象</span>  <span class="token punctuation">}</span>  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// todo something</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>View<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>Button onPress<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>foo<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>View<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>闭包是无法訪问到其外部函数的this对象的。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token function-variable function">m</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> self <span class="token operator">=</span><span class="token keyword">this</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> o<span class="token punctuation">)</span> <span class="token comment">// 输出true，this就是这个对象</span>        <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> o<span class="token punctuation">)</span> <span class="token comment">// false，this的值是全局对象或undefined</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>self <span class="token operator">===</span> o<span class="token punctuation">)</span> <span class="token comment">// true</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="隐式丢失this"><a href="#隐式丢失this" class="headerlink" title="隐式丢失this"></a>隐式丢失this</h2><p>隐式绑定this的函数由于如下类似原因丢失this，this绑定到全局对象上。</p><ul><li>引用传递，绑定上下文对象的函数赋值给一个函数f，调用这个函数f</li><li>使用逗号运算符</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">var</span> foo<span class="token operator">=</span><span class="token punctuation">{</span>  a<span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">,</span>  <span class="token function-variable function">bar</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token string">"use strict"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 20</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>bar<span class="token operator">=</span>foo<span class="token punctuation">.</span>bar<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// window 10</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>bar<span class="token punctuation">,</span>foo<span class="token punctuation">.</span>bar<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// window 10</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>bar<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token punctuation">{</span>  a <span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>  <span class="token function-variable function">f</span> <span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function-variable function">f2</span> <span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token function-variable function">myFn</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>bar<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>myFn<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// window 0</span>bar<span class="token punctuation">.</span><span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// bar 10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> this </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git使用心得</title>
      <link href="/2021/11/18/Git%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97/"/>
      <url>/2021/11/18/Git%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>为完成第二届阿里巴巴前端练习生的结业项目，小组使用GitHub作为项目代码的开发管理。通过这次宝贵机会，有了一些Git的使用心得。</p><h2 id="多人协作开发流程"><a href="#多人协作开发流程" class="headerlink" title="多人协作开发流程"></a>多人协作开发流程</h2><ul><li><p>小a准备干活前，可从远程仓库拉取最新代码，解决可能存在的代码冲突问题后，在这基础上进行开发。</p><p><code>git checkout main</code>切换到本地的main分支。 <code>git pull</code>拉取远程仓库对应分支代码到本地当前分支。<code>git checkout dev-a</code>切换到本地开发分支。<code>git merge main</code>把本地main分支代码合并到本地开发分支。这时候可能出现代码冲突情况，解决好代码冲突后，开始码代码。</p><blockquote><p>代码冲突两个条件：</p><ul><li>目标分支的历史提交记录比源分支旧。</li><li>目标分支存在未提交的修改，分支合并时该修改将会被覆盖。可以是和源分支文件同名的文件内容修改，也可以是目标分支历史提交记录中包含的文件，其文件内容发生变化。</li></ul></blockquote></li><li><p>小a写完代码，可从远程仓库拉取最新代码，解决可能存在的代码冲突问题后，然后提交代码并要求合并。</p><p><code>git checkout main</code>切换到本地的main分支。 <code>git pull</code>拉取远程仓库对应分支代码到本地当前分支。<code>git checkout dev-a</code>切换到本地开发分支。<code>git merge main</code>把本地main分支代码合并到本地开发分支。解决好可能的代码冲突问题。<code>git add .</code>选择当前分支除了<code>.gitignore</code>外的全部变动文件。<code>git commit -m '变动说明'</code>添加此次提交说明。<code>git push</code>推送文件到远程开发分支，然后<code>create pull request</code>请求将开发分支代码合并到main分支。代码审核人觉得ok，就会merge，否则可能close这个请求。</p><blockquote><p><code>git add</code>命令可以单独选择部分变动文件，然后<code>git commit -m '变动说明'</code>对这部分文件添加提交的注释。当全部文件添加好提交注释后，使用<code>git push</code>推送文件到远程对应的分支。</p></blockquote></li></ul><h2 id="开源项目贡献流程"><a href="#开源项目贡献流程" class="headerlink" title="开源项目贡献流程"></a>开源项目贡献流程</h2><ul><li><p>小b fork钟意的开源项目到自己账号空间中。<code>git clone '生成的项目地址'</code>将fork得到的项目克隆到本地。</p></li><li><p><code>git branch dev-b</code>创建一个开发分支。<code>git checkout dev-xiaob</code>切换到本地开发分支。<code>git merge main</code>把本地main分支代码合并到本地开发分支，在这个基础上进行开发。</p></li><li><p>小b写完代码后，fork得到的仓库需要同步源仓库，避免之后提交pr时因为出现代码冲突问题而不被采纳。</p><p><code>git remote add upstream https://github.com/OriginalRepo/OriginalProject.git</code>添加上游源仓库。<code>git fetch upstream</code>从源仓库获取最新代码到本地upstream/main分支。<code>git merge upstream/main</code>把本地upstream/main分支代码合并到本地开发分支。解决好可能的代码冲突问题。</p></li><li><p><code>git add .</code>选择当前分支除了<code>.gitignore</code>外的全部变动文件。<code>git commit -m '变动说明'</code>添加此次提交说明。<code>git push origin</code>推送文件到fork得到的项目的远程开发分支，然后<code>create pull request</code>请求将开发分支代码合并到开源项目的main分支。代码审核人觉得ok，就会merge，否则可能close这个请求。</p></li></ul><h2 id="Commit-Message"><a href="#Commit-Message" class="headerlink" title="Commit Message"></a>Commit Message</h2><pre class="line-numbers language-text" data-language="text"><code class="language-text">type(scope): subjectbodyfooter<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Type和subject是必选的，scope、body和footer是可选的。Body是commit的详细描述，如果本次commit是针对某个issue，可在footer部分说明。</p><ul><li><p><code>feat:</code> 功能变动</p></li><li><p><code>fix:</code> 修复bug</p></li><li><p><code>docs:</code> 文档变动</p></li><li><p><code>style:</code> 代码格式变动 </p></li><li><p><code>refactor:</code> 代码重构</p></li><li><p><code>test:</code> 测试变动</p></li><li><p><code>chore:</code> 构建过程或者辅助工具变动</p></li><li><p><code>perf:</code> 性能优化</p></li><li><p><code>revert:</code> 撤回commit</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端常识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是package-lock.json</title>
      <link href="/2021/11/14/%E4%BB%80%E4%B9%88%E6%98%AFpackage-lock.json/"/>
      <url>/2021/11/14/%E4%BB%80%E4%B9%88%E6%98%AFpackage-lock.json/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>当我们第一次执行 <code>npm intall</code> 命令时，npm自动为项目创建<code>package-lock.json</code>文件。咋看之下，项目的根目录赫然有两个文件名相似的文件，<code>package.json</code>和<code>package-lock.json</code>。package.json文件指明项目的包依赖关系，为什么还需要生成这个文件呢？如果你有这个疑问的话，请继续阅读下去。</p><h2 id="package-lock-json介绍"><a href="#package-lock-json介绍" class="headerlink" title="package-lock.json介绍"></a>package-lock.json介绍</h2><h3 id="它是什么"><a href="#它是什么" class="headerlink" title="它是什么"></a>它是什么</h3><p>据<a href="https://docs.npmjs.com/cli/v7/configuring-npm/package-lock-json">官网</a>介绍，当npm修改依赖树或者<code>package.json</code>文件时，就会自动创建<code>package-lock.json</code>文件。它精确描述整颗依赖树，后续执行<code>npm install</code>命令都会生成完全一致的依赖树。</p><blockquote><p><code>package-lock.json</code> is automatically generated for any operations where npm modifies either the <code>node_modules</code> tree, or <code>package.json</code>. It describes the exact tree that was generated, such that subsequent installs are able to generate identical trees, regardless of intermediate dependency updates.</p></blockquote><p>项目的顶级依赖能有自己的子依赖，这些子依赖同样也能有自己的子依赖。如此下去，便构成了一颗依赖树。</p><h3 id="它有啥用"><a href="#它有啥用" class="headerlink" title="它有啥用"></a>它有啥用</h3><p>在<code>package.json</code>文件中，用如下方式来标明自己所需要库包的版本。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token property">"@types/react"</span><span class="token operator">:</span> <span class="token string">"^17.0.0"</span><span class="token punctuation">,</span>  <span class="token property">"react-scripts"</span><span class="token operator">:</span> <span class="token string">"4.0.3"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到<code>package.json</code>文件只能锁定依赖包的大版本，也就是版本号第一位，不能锁定小版本。如果<code>@types/react</code>包维护者发布的大版本为17的最新库包是17.0.34，那么运行<code>npm install</code>就会得到这个最新库包。</p><p>这可能会出现问题。比如有个开源项目使用ejs模板引擎， 使用<code>npm install ejs --save</code>安装了最新依赖，<code>package.json</code>文件指明ejs的版本号是^2.5.6。过了一段时间, ejs库维护者修复了一个bug， 版本变成了2.5.7。这时小a觉得这个项目有意思, 想贡献代码, 于是克隆到本地, 运行<code>npm install</code>。 由于ejs最新版本是2.5.7， 因此小a电脑上安装的ejs版本就是2.5.7。理论上来说, 这两个版本应该是兼容的, 但是ejs库的bug修复后可能会影响到这个开源项目使用的功能, 使得小a克隆的项目运行结果和源仓库项目的运行结果不同。</p><p>package-lock.json可以防止上述情况。从npm v5开始，npm根据<code>package-lock.json</code>的内容来处理和安装依赖。</p><p>据我所知，<code>package-lock.json</code>有以下几个作用：</p><ul><li>锁定安装时项目依赖包的版本号，保证大家的依赖包一致。</li><li>优化依赖安装过程，允许npm跳过已安装依赖包的元信息解析。</li><li><code>package-lock.json</code>文件包含依赖树的完整信息。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端常识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 包依赖 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Node编写CLI工具</title>
      <link href="/2021/09/20/%E5%9F%BA%E4%BA%8ENode%E7%BC%96%E5%86%99CLI%E5%B7%A5%E5%85%B7/"/>
      <url>/2021/09/20/%E5%9F%BA%E4%BA%8ENode%E7%BC%96%E5%86%99CLI%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在前端日常开发中，会遇见各种各样的CLI工具。比如一行命令帮你打包的webpack、一行命令帮你生成Vue项目模板的vue-cli以及快速创建React项目的create-react-app。</p><p>然而有时候找不到符合需求的CLI工具，这时我们可以使用Node编写CLI工具。这里先举个编写并执行JavaScript脚本的例子。有个index.js文件，内容如下。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'this is a script'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在命令行中运行此脚本。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">&gt; node index.js## 输出：&gt; this is a script<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果我们在项目的package.json文件里面的<code>scripts</code>字段上添加脚本名。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"scripts"</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token property">"a-simple-script"</span><span class="token operator">:</span><span class="token string">"node index.js"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时，可以在命令行这么运行脚本。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">&gt; npm run a-simple-script<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h3><p>新建一个文件夹，不妨取名为a-simple-cli。使用VS Code打开这个空文件夹，然后在VS Code中打开一个新终端，运行如下命令。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输入自定义的项目数据后，将会生成类似如下的package.json文件。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"a-simple-cli"</span><span class="token punctuation">,</span>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>  <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"a simple cli"</span><span class="token punctuation">,</span>  <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"index.js"</span><span class="token punctuation">,</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"keywords"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"cli"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">"xu kai"</span><span class="token punctuation">,</span>  <span class="token property">"license"</span><span class="token operator">:</span> <span class="token string">"ISC"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在当前项目根目录新建一个index.js文件，输入如下内容：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token hashbang comment">#!/usr/bin/env node</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'this is a script'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>添加<code>#!/usr/bin/env node</code>或者<code>#!/usr/bin/node</code>，这是告诉系统这个脚本使用Node来执行。<br>Shebang是符号#!的名称。在开头字符#!之后，可以有一个或数个空白字符，后接解释器的绝对路径，用于调用解释器。</p><p>配置#!/usr/bin/env node, 可以让系统动态的去查找Node来执行你的脚本文件，解决了不同的用户Node路径不同的问题。#!/usr/bin/node则是明确告诉系统node执行程序的路径为/usr/bin/node。</p><h3 id="为工具取名"><a href="#为工具取名" class="headerlink" title="为工具取名"></a>为工具取名</h3><p>在package.json文件里添加一个<code>bin</code>字段，把这个CLI工具的名字命名为a-simple-cli。这是为了我们能够在命令行里面输入<code>a-simple-cli</code>，不用添加前言里面的node和npm run，然后它就打印一句this is a script。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"a-simple-cli"</span><span class="token punctuation">,</span>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>  <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"a simple cli"</span><span class="token punctuation">,</span>  <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"index.js"</span><span class="token punctuation">,</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"bin"</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token property">"a-simple-cli"</span><span class="token operator">:</span><span class="token string">"index.js"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"keywords"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"cli"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">"xu kai"</span><span class="token punctuation">,</span>  <span class="token property">"license"</span><span class="token operator">:</span> <span class="token string">"ISC"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>bin字段里面写上这个可执行文件的命令名，也就是a-simple-cli。它告诉npm，里面的js脚本可以通过命令行的方式执行，以a-simple-cli的命令调用。</p><h3 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h3><p>假如想给这个工具添加一个功能，使得它会输出用户的所有输入参数。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">&gt; a-simple-cli Hello world!## 输出&gt; this is a script&gt; Hello world!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在index.js文件中更新为如下内容。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token hashbang comment">#!/usr/bin/env node</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'this is a script'</span><span class="token punctuation">)</span><span class="token keyword">let</span> inputArgs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  inputArgs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>inputArgs<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>process</code>是一个全局对象，不需要导入。通过process这个对象我们可以拿到当前脚本执行环境等一系列信息，其中就包括命令行的输入情况。命令行的输入信息保存在<code>process.argv</code>。argv是个数组，前两位是固定的，分别是Node程序的路径和脚本存放的位置，从第三位开始才是用户输入的内容。</p><h3 id="安装CLI工具"><a href="#安装CLI工具" class="headerlink" title="安装CLI工具"></a>安装CLI工具</h3><h4 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h4><p>在当前项目根目录下，打开命令行工具，执行<code>npm link</code>，将当前的代码在<code>{prefix}/node_modules</code>下留个快捷方式。npm检测到package.json里面存在一个bin字段，将会在{prefix}目录中生成可执行的脚本文件。当我们在系统命令行直接输入a-simple-cli的时候，实际上就是执行这里的脚本。因为将这个全局目录配置为系统环境变量了，当执行a-simple-cli命令的时候，系统会先找系统命令和系统变量，然后到环境变量里面继续查找。找到这个全局目录后，发现有个匹配上了该命令名的可执行文件，接着就直接执行它。我们可以使用<code>npm config get prefix</code>命令获取到prefix的值。</p><p>在Linux或者Unix系统中，执行npm link 的结果可看<a href="https://docs.npmjs.com/cli/v6/commands/npm-link">官网</a>介绍：</p><blockquote><p>First, npm link in a package folder will create a symlink in the global folder {prefix}/lib/node_modules/<package> that links to the package where the npm link command was executed. It will also link any bins in the package to {prefix}/bin/{name}. Note that npm link uses the global prefix (see npm prefix -g for its value).</package></p></blockquote><p>这样，可以在命令行里面，直接敲你的命令，看看结果输出吧。</p><h4 id="局部安装"><a href="#局部安装" class="headerlink" title="局部安装"></a>局部安装</h4><p>如果我们希望CLI工具仅在某个项目里使用，安装工具的时候，不要链接到全局目录里面去，而是使用<code>npm i file:&lt;你的CLI脚本目录路径&gt;</code>。这会把它当成项目的依赖安装到项目的node_modules里面去。安装成功后在node_modules里面会有一个<code>.bin</code>目录，里面就存放着可执行文件。</p><p>这样安装的CLI工具，必须在项目的package.json的scripts字段添加脚本命令，然后才能通过<code>npm run</code>的方式执行。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token property">"a-simple-cli"</span><span class="token operator">:</span> <span class="token string">"a-simple-cli"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm run a-simple-cli i am keen on open source!<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> CLI工具 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
